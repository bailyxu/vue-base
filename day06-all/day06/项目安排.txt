http://www.bejson.com/
www.flotcharts.org/
1、针对路由模块综合练习
	(:- 10:00)
	练习：实现一个SPA，在这个SPA有两个组件类，cart和orderConfirm；
	①在cart有一个按钮，点击跳转到orderConfirm，在跳转的同时发送价格为200
	②orderConfirm接受到价格信息，显示在h2标签
	③在orderConfirm中嵌套stepOne stepTwo，同时在orderConfirm中希望默认加载stepOne
	  在orderCOnfirm，指定容器 router-view
	  在orderConfirm的路由对象指定children


2、熟悉基于命令行的开发方式

	2.1 认识工程目录结构
		assets 资源文件(img/css/js/fonts/..)
		components 组件
		router/index.js 完成路由词典的设置
		App.vue 根组件
		main.js 创建一个Vue的实例，同时指定根组件

	2.2 启动的方式
		npm start之后做的事情：
		①通过node执行build/dev-service.js 指定开发服务器并端口8080
		②加载index.html和main.js
		(在main.js 通过new Vue指定router/根组件)
		③根据路由匹配规则，从router/index.js加载路由地址为空 显示Hell.vue

	2.3 如何在模板中调用创建好的.vue结尾的文件？
	  2.3.1 全局组件
		main.js
		import MyHeader from '@/components/myheadder'
		Vue.component('my-header',MyHeader)
	  2.3.2 局部组件
			比如myList.vue需要myHeader
			只需要在myList.vue的script中引入对应的组件类
			import MyHeader from '@/components/myheadder'

			export default{
			 components:{
			   my-header:MyHeader
			 }
			}


3、练习 (:-15:30)
	基于命令行的方式来实现todolist	
	①完成组件的创建
	todobox.vue todolist.vue todoitem.vue todoinput.vue
	②配置todolist todoitem todoinput作为全局组件
	找main.js Vue.component
	③给todobox指定路由地址
	④实现add按钮的功能
		步骤1：先实现数据 从todoinput到todolist
		步骤2：在todolist中 动态创建多个todoitem,传递todoitem要显示的内容


项目大致流程：
	①需求分析
	②可行性分析
	③概要设计、详细设计
	④编码 ui test
	⑤联合调试 test
	⑥上线
	⑦迭代、维护

4、搭建项目的脚手架

	①启动apache和mysql
	②初始化数据库
	 admin/xz.sql
	 (
		下载day04.rar压缩包，
		将admin.zip拷贝到c:/xampp/htdocs/,
		将admin.zip解压缩到当前文件夹。
	 )
	③需求分析
	login index
	index进行路由嵌套（charts/productList/userList）

	⑤准备需要用到的文件和文件夹
	在assets目录下创建css文件夹、js文件夹，img文件夹
	将bootstrap.css、jquery.js、jquery.flot.js、图片拷贝到对应的文件夹中
	⑥创建spa中所需要用到login/index/charts/productList/userList组件类
	⑦配置路由词典
	login/index
		--charts
		--productList
		--userList
		每个组件就先显示一个h1标签。
	要求：默认加载login，在index嵌套组件，默认加载charts组件到index

5、完成login的重构
	①在src/main.js中引入了对应的css、js文件
	②配置vueResource
	在src/main.js
	import VueResource from 'vue-resource'
	Vue.use(VueResource);
	③
	找到c/xampp/htdocs/admin/login.html
	在此基础之上使用vue的技术来进行重构
	v-model v-on vue-resource

	http://localhost/admin/data/login.php?uname=dingding&upwd=123456

	跨域问题解决方案：
	①找到c:/xampp/htdocs/admin/data
	②在该文件夹修改init.php user/login.php
	init.php :
	header('Access-Control-Allow-Origin:*');

	login.php
	将require_once('../init.php')放在最上边


6、来实现index.vue
	在c/xampp/htdocs/admin/index.html基础上进行重构
	js：
	c/xampp/htdocs/admin/js/app.js


	核心功能：点击左侧的功能树，正确响应

	在app.js ①初始化变量 ②定义一个方法setContentHeight ③给a绑定单击事件处理函数
	
	步骤1：在methods完成setContentHeight方法的定义
	步骤2：在mounted之后 给侧边栏菜单所有的a标记绑定单击事件处理函数



7、来完成charts.vue
①将htdcos/admin/index.html中pageContent注释中的内容 拷贝粘贴到charts.vue
②定义数据和方法(getRandomData())
③在组件挂载之后，绘制折线图

折线图插件(jquery.flot.js)的使用:
	 var plot = $.plot("#placeholder", [getRandomData()], {
		series: {
		  shadowSize: 0	// Drawing is faster without shadows
		},
		yaxis: {
		  min: 0,
		  max: 100
		},
		xaxis: {
		  show: false
		}
	      });

	plot.setData([getRandomData()]);
	plot.draw();

如何做清理工作？
	在生命周期destroy这个阶段可以用来实现定时器的关闭，事件的解绑，变量的清空

8、商品列表
	功能要求：
	①第一次进入到商品列表组件，向服务器端发起请求 将数据渲染在列表
	②支持每页加载多少条数据
	  封装方法
	  pageSize
	  watch






	③支持分页加载
	http://localhost/admin/data/product_list.php
	
	
	
	参数：pageSize/pno

	步骤1：
	向服务器发请求，将数据渲染
	注意事项：
	img :src="require('../assets/'+l.pic)"
	
	步骤2：
	实现每页显示数据数量的设置功能

	通过watch监听，来实现功能
	① v-model
	②  watch，监听到数据变化，向服务器发起请求

	步骤3：（:- 14:25）
	分页加载
	根据服务器端返回的pageCount，创建一个有指定数量元素的数组pageList(存储的页码)

	完成按钮在单击的处理！





